/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.example.generatedClasses;
import java.io.StringReader;import java.util.*;
import org.example.commands.*;
import org.example.helpers.*;

public class Parser implements ParserConstants {
    public List<Command> parse(String input) throws ParseException{
        ReInit(new java.io.StringReader(input));
        return commandList();
    }

  final public List<Command> commandList() throws ParseException {
    trace_call("commandList");
    try {List<Command> commands = new ArrayList<Command>(); Command cmd;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FILTRER:
        case CHOISIR:
        case CALCULER:
        case GROUPER:
        case CHARGER:
        case AFFICHER:
        case WHITESPACE:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WHITESPACE:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(WHITESPACE);
        }
        cmd = statement();
commands.add(cmd);
      }
      jj_consume_token(0);
{if ("" != null) return commands;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("commandList");
    }
  }

  final public Command statement() throws ParseException {
    trace_call("statement");
    try {Command cmd;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FILTRER:{
        cmd = filter_statement();
        break;
        }
      case CHOISIR:{
        cmd = choose_statement();
        break;
        }
      case CALCULER:{
        cmd = calculate_statement();
        break;
        }
      case GROUPER:{
        cmd = group_statement();
        break;
        }
      case CHARGER:{
        cmd = charger_statement();
        break;
        }
      case AFFICHER:{
        cmd = afficher_statement();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  final public ChargeCommand charger_statement() throws ParseException {
    trace_call("charger_statement");
    try {
      jj_consume_token(CHARGER);
      jj_consume_token(WHITESPACE);
      jj_consume_token(STRING);
{if ("" != null) return new ChargeCommand(getToken(0).image.replaceAll("\u005c"", ""));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("charger_statement");
    }
  }

  final public DisplayCommand afficher_statement() throws ParseException {
    trace_call("afficher_statement");
    try {
      jj_consume_token(AFFICHER);
{if ("" != null) return new DisplayCommand();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("afficher_statement");
    }
  }

  final public FilterCommand filter_statement() throws ParseException {
    trace_call("filter_statement");
    try {Condition condition;
      jj_consume_token(FILTRER);
      jj_consume_token(WHITESPACE);
      condition = condition();
{if ("" != null) return new FilterCommand(condition);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("filter_statement");
    }
  }

  final public SelectCommand choose_statement() throws ParseException {
    trace_call("choose_statement");
    try {Columns columns;
      jj_consume_token(CHOISIR);
      jj_consume_token(WHITESPACE);
      columns = column_list();
{if ("" != null) return new SelectCommand(columns);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("choose_statement");
    }
  }

  final public CalculateCommand calculate_statement() throws ParseException {
    trace_call("calculate_statement");
    try {Aggregation aggregation; String columnName; String aggregationType; Token aggregationTypeToken;
      jj_consume_token(CALCULER);
      jj_consume_token(WHITESPACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MOYENNE:{
        aggregationTypeToken = jj_consume_token(MOYENNE);
aggregationType = aggregationTypeToken.image;
        break;
        }
      case MAX:{
        aggregationTypeToken = jj_consume_token(MAX);
aggregationType = aggregationTypeToken.image;
        break;
        }
      case MIN:{
        aggregationTypeToken = jj_consume_token(MIN);
aggregationType = aggregationTypeToken.image;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(WHITESPACE);
      columnName = column();
{if ("" != null) return new CalculateCommand(new Aggregation(columnName, aggregationType));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("calculate_statement");
    }
  }

  final public GroupCommand group_statement() throws ParseException {
    trace_call("group_statement");
    try {Columns groupColumns;
    Aggregation aggregation = null;
    String aggregationType = null;  // Initialize aggregationType
    String aggregationColumn = null; // Initialize aggregationColumn

      jj_consume_token(GROUPER);
      jj_consume_token(WHITESPACE);
      groupColumns = column_list();
      jj_consume_token(WHITESPACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR:{
        jj_consume_token(PAR);
        jj_consume_token(WHITESPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOYENNE:{
          jj_consume_token(MOYENNE);
aggregationType = getToken(0).image;
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
aggregationType = getToken(0).image;
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
aggregationType = getToken(0).image;
          break;
          }
        case SOMME:{
          jj_consume_token(SOMME);
aggregationType = getToken(0).image;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        aggregationColumn = column();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
if (aggregationType != null && aggregationColumn != null) {
            aggregation = new Aggregation(aggregationType, aggregationColumn);
        }
        {if ("" != null) return new GroupCommand(groupColumns, aggregation);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("group_statement");
    }
  }

  final public Columns column_list() throws ParseException {
    trace_call("column_list");
    try {List<String> columns = new ArrayList<String>(); String col;
      col = column();
columns.add(col);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        col = column();
columns.add(col);
      }
{if ("" != null) return new Columns(columns);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("column_list");
    }
  }

  final public String column() throws ParseException {
    trace_call("column");
    try {
      jj_consume_token(IDENTIFIER);
{if ("" != null) return getToken(0).image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("column");
    }
  }

  final public Condition condition() throws ParseException {
    trace_call("condition");
    try {String column; String operator; String value;
      column = column();
      jj_consume_token(WHITESPACE);
      operator = operator();
      jj_consume_token(WHITESPACE);
      value = value();
{if ("" != null) return new Condition(column, operator, value);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("condition");
    }
  }

  final public String operator() throws ParseException {
    trace_call("operator");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
{if ("" != null) return "=";}
        break;
        }
      case NEQ:{
        jj_consume_token(NEQ);
{if ("" != null) return "!=";}
        break;
        }
      case LT:{
        jj_consume_token(LT);
{if ("" != null) return "<";}
        break;
        }
      case GT:{
        jj_consume_token(GT);
{if ("" != null) return ">";}
        break;
        }
      case LTE:{
        jj_consume_token(LTE);
{if ("" != null) return "<=";}
        break;
        }
      case GTE:{
        jj_consume_token(GTE);
{if ("" != null) return ">=";}
{if (true) throw new ParseException("Invalid operator at position " + token.beginColumn);}
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("operator");
    }
  }

  final public String value() throws ParseException {
    trace_call("value");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
{if ("" != null) return getToken(0).image;}
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
{if ("" != null) return getToken(0).image;}
{if (true) throw new ParseException("Invalid value at position " + token.beginColumn);}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("value");
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80de,0x8000,0xde,0x620,0xe20,0x100,0x400000,0x3f0000,0x6000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
