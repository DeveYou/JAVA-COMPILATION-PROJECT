options {
    STATIC = false;
    LOOKAHEAD = 1;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)
package org.example.generatedClasses;
import java.io.StringReader;import java.util.*;
import org.example.commands.*;
import org.example.helpers.*;

public class Parser {
    public List<Command> parse(String input) throws ParseException{
        ReInit(new java.io.StringReader(input));
        return commandList();
    }
}

PARSER_END(Parser)


TOKEN : {
    < FILTRER: "FILTRER" > |
    < CHOISIR: "CHOISIR" > |
    < CALCULER: "CALCULER" > |
    < GROUPER: "GROUPER" > |
    < MOYENNE: "MOYENNE" > |
     < CHARGER: "CHARGER" > |
     < AFFICHER: "AFFICHER"> |
    < PAR : "PAR"> |
    < MAX: "MAX" > |
    < MIN: "MIN" > |
    < SOMME : "SOMME"> |
    < IDENTIFIER: (<LETTER> (<LETTER>|<DIGIT>|"_")*) > |
    < NUMBER: (<DIGIT>)+ > |
    < STRING: "\"" (~["\""])* "\"" > |
    < WHITESPACE: [" ", "\t", "\n", "\r"] > |
    <EQ : "="> |
    <NEQ : "!="> |
    <GT : ">"> |
    <LT : "<"> |
    <GTE : ">="> |
    <LTE : "<="> |
    <COMMA : ","> |
    <LPAREN : "("> |
    <RPAREN : ")"> |
    <SEMICOLON : ";">

}

SKIP : {
    < WHITESPACE >
}

MORE : {
    < #LETTER: ["a"-"z", "A"-"Z"] >
    | < #DIGIT: ["0"-"9"] >
}

List<Command> commandList() :
{ List<Command> commands = new ArrayList<Command>(); Command cmd; }
{
    (
    (<WHITESPACE>)*
     cmd = statement() { commands.add(cmd); }
     )* <EOF>
    { return commands; }
}

Command statement() :
{ Command cmd; }
{
    ( cmd = filter_statement()
    | cmd = choose_statement()
    | cmd = calculate_statement()
    | cmd = group_statement()
    | cmd = charger_statement()
    | cmd = afficher_statement()
    )
    <SEMICOLON>
    { return cmd; }
}


ChargeCommand charger_statement() :
{ Token t = null;}
{
    <CHARGER> <WHITESPACE> t = <STRING> {return new ChargeCommand(t.image.replaceAll("\"", ""));}
}

DisplayCommand afficher_statement() :
{  }
{
    <AFFICHER> {return new DisplayCommand();}
}

FilterCommand filter_statement() :
{ Condition condition; }
{
    <FILTRER> <WHITESPACE> condition=condition()
    { return new FilterCommand(condition); }
}


SelectCommand choose_statement() :
{ Columns columns; }
{
    <CHOISIR> <WHITESPACE> columns=column_list()
    { return new SelectCommand(columns); }
}


CalculateCommand calculate_statement() :
{ Aggregation aggregation; String columnName; String aggregationType; Token aggregationTypeToken;}
{
    <CALCULER> <WHITESPACE> (aggregationTypeToken = <MOYENNE> { aggregationType = aggregationTypeToken.image; }
                   | aggregationTypeToken = <MAX> { aggregationType = aggregationTypeToken.image; }
                   | aggregationTypeToken = <MIN> { aggregationType = aggregationTypeToken.image; })
    <WHITESPACE> columnName = column()
    { return new CalculateCommand(new Aggregation(columnName, aggregationType)); }
}


GroupCommand group_statement() :
{
    Columns groupColumns;
    Aggregation aggregation = null;
    String aggregationType = null;  // Initialize aggregationType
    String aggregationColumn = null; // Initialize aggregationColumn
    Token aggregationTypeToken = null;
}
{
     <GROUPER> <WHITESPACE> groupColumns=column_list()
     [<PAR> <WHITESPACE>
        (aggregationTypeToken = <MOYENNE> { aggregationType = aggregationTypeToken.image; }
         | aggregationTypeToken = <MAX> { aggregationType = aggregationTypeToken.image; }
         | aggregationTypeToken = <MIN> { aggregationType = aggregationTypeToken.image; })
        "(" aggregationColumn = column() ")"
     ]
    {
        if (aggregationType != null && aggregationColumn != null) {
            aggregation = new Aggregation(aggregationColumn, aggregationType);
        }
        return new GroupCommand(groupColumns, aggregation);
    }
}



Columns column_list() :
{ List<String> columns = new ArrayList<String>(); String col;}
{
    col = column() { columns.add(col);} ( "," col = column() { columns.add(col); } )*
    { return new Columns(columns); }
}

String column() :
{ Token t = null;}
{
    t=<IDENTIFIER> { return t.image; }
}

Condition condition() :
{ String column; String operator; String value; }
{
    column = column() <WHITESPACE> operator=operator() <WHITESPACE> value=value()
    { return new Condition(column, operator, value); }
}

String operator() :
{ Token t = null;}
{
    t= <EQ> | <NEQ> | <LT> | <GT> | <LTE> | <GTE>  { return t.image; }
}

String value() :
{ Token t = null; }
{
    t= <NUMBER> | <STRING>  { return t.image; }

}